# -*- coding: utf-8 -*-
"""Lab2_numpy_pandas_matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CMhxeV0el0YOA7ykjPNwXv5He-BbeiPx
"""

import pandas as pd
import numpy as np

# Importing pandas library
import pandas as pd

# Creating and initializing a nested list
age = [['Aman', 95.5, "Male"], ['Sunny', 65.7, "Female"],
       ['Monty', 85.1, "Male"], ['toni', 75.4, "Male"]]

# Creating a pandas dataframe
df = pd.DataFrame(age, columns=['Name', 'Marks', 'Gender'])

# Printing dataframe
df

df=pd.read_csv("Data.csv")

type(df)

df.shape

df.size

df.head()

X = df.iloc[:,0:3].values
print(X)

#Handling Missing values  #Numerical data
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan,strategy='mean')
imputer.fit(X[:,1:3])
X[:, 1:3] = imputer.transform(X[:,1:3])
print(X)

#Handling Missing values  #Numerical data
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan,strategy='constant', fill_value=5)
imputer.fit(X[:,1:3])
X[:, 1:3] = imputer.transform(X[:,1:3])
print(X)

#Handling categorical data
# label Encoding #dependent variable Purchased
Y = df.iloc[:,3].values
print(Y)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
Y = le.fit_transform(Y)
print(Y)

"""#Handling categorical data
# label Encoding #Country
Y = df.iloc[:,0].values
print(Y)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
Y = le.fit_transform(Y)
print(Y)"""

#Handling categorical data
# OneHot Encoding
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
X = np.array(ct.fit_transform(X))
print(X)

#Split the dataset into test and train set
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 1)
print("\n")
print(X_train)
print("\n")
print(Y_train)
print("\n")
print(X_test)
print("\n")
print(Y_test)

#Feature Scaling. StandardScaler standardizes a feature by subtracting the mean
# and then scaling to unit variance. Unit variance means dividing all the values by the standard deviation.
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:])
print(X_train)
X_test[:, 3:] = sc.transform(X_test[:, 3:])

#line chart or linear plot
from matplotlib import pyplot as plt
plt.plot([1,2,3],[4,5,1])
plt.show()

#line Chart
time = [0, 1, 2, 3]
position = [0, 100, 200, 300]
plt.plot(time, position)
plt.title('Info')
plt.xlabel('Time (hr)')
plt.ylabel('Position (km)')
plt.show()

#line chart with grids
from matplotlib import style
style.use('ggplot')
time = [0, 1, 2, 3]
position = [0, 100, 200, 300]
plt.plot(time, position,'g',label='line2', linewidth=1)
plt.title('Info')
plt.xlabel('Time (hr)')
plt.ylabel('Position (km)')
#plt.legend()
#plt.grid(True,color='k')
plt.show()

#Bar plot, Bar plots are used to compare categorical values. likes GDP of each city of a country
plt.bar([2,4,6,8],[8,10,12,16], label='example1',color='g')

#Histogram plot. Histrograms are used to compare quantitative variables. Like Age groups.
population_ages=[10,20,30,35,40,15,112,115,16,190,200]
bins=[0,10,20,30,40,50,60,70,80,90]
plt.hist(population_ages,bins, histtype='bar',rwidth=0.8)
plt.title('Info')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

#scatter plot.
#scatter plots are used to compare two variable in 2D or 3 variables in 3D looking for finding correlation between variables.
x=[1,2,3,4,5]
y=[4,8,9,1,2]
plt.scatter(x,y,label='skitscat',color='k')
plt.show()

#Stackplot. To track changes over time in two or more relative group which make up a single category.
# List of Days
days = [1, 2, 3, 4, 5]

# No of Study Hours
Studying = [7, 8, 6, 11, 7]

# No of Playing Hours
playing =  [8, 5, 7, 8, 13]

# Stackplot with X, Y, colors value
plt.stackplot(days, Studying, playing,
              colors =['r', 'c'])
# Days
plt.xlabel('Days')

# No of hours
plt.ylabel('No of Hours')

# Title of Graph
plt.title('Representation of Study and \
Playing wrt to Days')

# Displaying Graph
plt.show()

